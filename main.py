import urllib.request
from urllib.parse import urlparse
import re
import os
from datetime import datetime, timedelta, timezone
import time
import opencc
import socket
import concurrent.futures
import json
import requests
from bs4 import BeautifulSoup

# 执行开始时间
timestart = datetime.now()

# 全局频道记录，确保每个频道只出现在一个分类
global_channel_records = {}

# 读取文本方法
def read_txt_to_array(file_name):
    """读取文本文件到数组"""
    try:
        with open(file_name, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            lines = [line.strip() for line in lines]
            return lines
    except FileNotFoundError:
        print(f"文件未找到: '{file_name}'")
        return []
    except Exception as e:
        print(f"读取文件出错: {e}")
        return []

# 定义多个对象用于存储不同内容的行文本
# 主频道
ys_lines = []  # 央视频道
ws_lines = []  # 卫视频道
ty_lines = []  # 体育频道
dy_lines = []  # 电影频道
dsj_lines = []  # 电视剧频道
gat_lines = []  # 港澳台
gj_lines = []  # 国际台
jlp_lines = []  # 纪录片
xq_lines = []  # 戏曲
js_lines = []  # 解说
newtv_lines = []  # NewTV
ihot_lines = []  # iHot
et_lines = []  # 儿童
zy_lines = []  # 综艺频道
mdd_lines = []  # 埋堆堆
yy_lines = []  # 音乐频道
game_lines = []  # 游戏频道
radio_lines = []  # 收音机频道
zb_lines = []  # 直播中国
cw_lines = []  # 春晚
mtv_lines = []  # MTV
migu_lines = []  # 咪咕直播
other_lines = []  # 其他频道

# ========== 国际频道分类 ========== 
jp_lines = []  # 日本频道
kr_lines = []  # 韩国频道
us_lines = []  # 美国频道
fr_lines = []  # 法国频道
uk_lines = []  # 英国频道
de_lines = []  # 德国频道
ru_lines = []  # 俄罗斯频道
ca_lines = []  # 加拿大频道
au_lines = []  # 澳大利亚频道
in_lines = []  # 印度频道
ph_lines = []  # 菲律宾频道
sg_lines = []  # 新加坡频道
my_lines = []  # 马来西亚频道
th_lines = []  # 泰国频道
vn_lines = []  # 越南频道

# 地方台
sh_lines = []  # 地方台-上海频道
zj_lines = []  # 地方台-浙江频道
jsu_lines = []  # 地方台-江苏频道
gd_lines = []  # 地方台-广东频道
hn_lines = []  # 地方台-湖南频道
ah_lines = []  # 地方台-安徽频道
hain_lines = []  # 地方台-海南频道
nm_lines = []  # 地方台-内蒙频道
hb_lines = []  # 地方台-湖北频道
ln_lines = []  # 地方台-辽宁频道
sx_lines = []  # 地方台-陕西频道
shanxi_lines = []  # 地方台-山西频道
shandong_lines = []  # 地方台-山东频道
yunnan_lines = []  # 地方台-云南频道
bj_lines = []  # 地方台-北京频道
cq_lines = []  # 地方台-重庆频道
fj_lines = []  # 地方台-福建频道
gs_lines = []  # 地方台-甘肃频道
gx_lines = []  # 地方台-广西频道
gz_lines = []  # 地方台-贵州频道
heb_lines = []  # 地方台-河北频道
hen_lines = []  # 地方台-河南频道
hlj_lines = []  # 地方台-黑龙江频道
jl_lines = []  # 地方台-吉林频道
jx_lines = []  # 地方台-江西频道
nx_lines = []  # 地方台-宁夏频道
qh_lines = []  # 地方台-青海频道
sc_lines = []  # 地方台-四川频道
tj_lines = []  # 地方台-天津频道
xj_lines = []  # 地方台-新疆频道

# ========== 新增娱乐类型频道分类 ==========
yl_lines = []  # 娱乐综合频道
xp_lines = []  # 小品频道
xs_lines = []  # 相声频道
ak_lines = []  # AKtv频道
sg_english_lines = []  # 新加坡式英语频道

# ========== 完整的频道字典 ==========
# 央视频道
ys_dictionary = [
    "CCTV1综合", "CCTV2财经", "CCTV3综艺", "CCTV4中文国际", "CCTV5体育", "CCTV5+体育赛事", "CCTV6电影", 
    "CCTV7国防军事", "CCTV8电视剧", "CCTV9纪录", "CCTV10科教", "CCTV11戏曲", "CCTV12社会与法", 
    "CCTV13新闻", "CCTV14少儿", "CCTV15音乐", "CCTV16奥林匹克", "CCTV17农业农村", "CCTV4K超高清", 
    "CCTV8K超高清", "CGTN英语新闻", "CGTN纪录", "CGTN法语", "CGTN俄语", "CGTN西班牙语", "CGTN阿拉伯语",
    "CCTV世界地理", "CCTV怀旧剧场", "CCTV风云足球", "CCTV高尔夫网球", "CCTV兵器科技", "CCTV女性时尚",
    "CCTV电视指南", "CCTV卫生健康", "CCTV中学生", "CCTV老故事", "CCTV发现之旅", "CCTV央视文化精品"
]

# 卫视频道
ws_dictionary = [
    "北京卫视", "湖南卫视", "浙江卫视", "东方卫视", "江苏卫视", "天津卫视", "山东卫视", "广东卫视", 
    "深圳卫视", "黑龙江卫视", "辽宁卫视", "安徽卫视", "河南卫视", "湖北卫视", "四川卫视", "重庆卫视", 
    "东南卫视", "江西卫视", "广西卫视", "陕西卫视", "吉林卫视", "云南卫视", "山西卫视", "甘肃卫视", 
    "海南卫视", "贵州卫视", "内蒙古卫视", "青海卫视", "宁夏卫视", "新疆卫视", "西藏卫视", "河北卫视", 
    "厦门卫视", "海峡卫视", "兵团卫视", "三沙卫视", "延边卫视", "康巴卫视", "安多卫视", "旅游卫视"
]

# 体育频道
ty_dictionary = [
    "CCTV5体育", "CCTV5+体育赛事", "广东体育", "五星体育", "北京体育休闲", "劲爆体育", "全纪实", 
    "足球频道", "篮球频道", "高尔夫网球频道", "冬奥纪实", "体育赛事", "ESPN", "卫视体育台", 
    "NBA TV", "英超联赛", "西甲联赛", "德甲联赛", "法甲联赛", "意甲联赛", "中超联赛", "CBA联赛",
    "腾讯体育", "PP体育", "咪咕体育", "新浪体育", "优酷体育", "爱奇艺体育", "虎牙体育", "斗鱼体育",
    "企鹅体育", "直播吧"
]

# 电影频道
dy_dictionary = [
    "CCTV6电影", "CHC家庭影院", "CHC动作电影", "CHC高清电影", "好莱坞电影", "动作电影", "喜剧电影", 
    "爱情电影", "科幻电影", "恐怖电影", "经典电影", "4K电影", "卫视电影", "星空电影", "龙华电影", 
    "美亚电影", "寰宇电影", "天映电影", "华纳电影", "迪士尼电影", "索尼电影", "派拉蒙电影", 
    "环球电影", "20世纪福克斯", "米高梅电影", "狮门电影", "IMAX电影", "电影频道", "高清电影", 
    "4K超高清电影", "3D电影", "怀旧电影", "奥斯卡电影", "金马奖电影", "戛纳电影", "柏林电影"
]

# 电视剧频道
dsj_dictionary = [
    "CCTV8电视剧", "湖南卫视金鹰独播剧场", "浙江卫视中国蓝剧场", "东方卫视东方剧场", "江苏卫视幸福剧场", 
    "北京卫视品质剧场", "安徽卫视海豚剧场", "山东卫视花漾剧场", "天津卫视快乐生活剧场", "江西卫视金牌剧场", 
    "深圳卫视黄金剧场", "广西卫视美丽剧场", "四川卫视合家欢剧场", "重庆卫视雾都剧场", "东南卫视东南剧苑", 
    "贵州卫视黄金剧场", "云南卫视浪漫剧场", "河北卫视民生剧场", "湖北卫视长江剧场", "辽宁卫视北方剧场",
    "电视剧频道", "都市剧场", "情感剧场", "古装剧场", "抗战剧场", "家庭剧场", "青春剧场", "悬疑剧场",
    "刑侦剧场", "谍战剧场", "历史剧场", "仙侠剧场", "玄幻剧场", "偶像剧场", "韩剧频道", "日剧频道",
    "美剧频道", "泰剧频道", "港剧频道", "台剧频道"
]

# 港澳台频道
gat_dictionary = [
    "凤凰卫视中文台", "凤凰卫视资讯台", "凤凰卫视香港台", "凤凰卫视电影台", "星空卫视", "澳视澳门台", 
    "澳视体育台", "澳视高清台", "澳视综艺台", "香港卫视", "香港财经资讯台", "香港国际财经台", 
    "香港开电视", "ViuTV", "有线新闻台", "有线财经资讯台", "有线娱乐台", "有线电影台", "有线体育台", 
    "澳门卫视", "澳门资讯台", "澳门体育台", "澳门综艺台", "澳门影视台", "澳亚卫视", "莲花卫视", 
    "香港有线18台", "香港有线602台", "澳门MACAU卫视", "香港NOW新闻台", "香港NOW财经台", "香港HOY TV",
    "香港奇妙电视", "香港RTHK31", "香港RTHK32", "澳门TDM澳视葡文", "澳门TDM澳门", "澳门TDM资讯"
]

# 国际台
gj_dictionary = [
    "CNN美国有线电视新闻网", "BBC英国广播公司", "NHK日本放送协会", "KBS韩国广播公司", "MBC文化广播公司", 
    "SBS首尔广播公司", "TVB无线电视", "ABC美国广播公司", "NBC全国广播公司", "FOX福克斯广播公司", 
    "HBO家庭票房", "Showtime", "Starz", "Cinemax", "AMC", "FX", "USA", "TNT", "TBS", "ESPN",
    "Disney Channel", "Nickelodeon", "Cartoon Network", "Comedy Central", "MTV", "VH1", 
    "BET", "Lifetime", "A&E", "History", "Discovery", "National Geographic", "Animal Planet",
    "TLC", "Food Network", "HGTV", "Travel Channel", "Syfy", "Bravo", "E!", "HSN", "QVC",
    "Weather Channel", "C-SPAN", "Bloomberg TV", "Fox Business", "CNBC World", "BBC America",
    "Telemundo", "Univision"
]

# 纪录片频道
jlp_dictionary = [
    "CCTV9纪录", "CGTN纪录", "Discovery探索频道", "国家地理", "历史频道", "BBC Earth", "动物星球", 
    "全纪实", "求索纪录", "金鹰纪实", "世界地理", "寰宇地理", "爱奇艺纪录片", "优酷纪录片", "腾讯纪录片", 
    "B站纪录片", "央视文化精品", "老故事", "发现之旅", "中学生", "地理频道", "科学频道", "人文纪录", 
    "军事纪录", "美食纪录", "旅行纪录", "自然纪录", "历史纪录", "文化纪录", "艺术纪录", "社会纪录", 
    "人物纪录", "事件纪录", "考古纪录", "宇宙纪录", "海洋纪录", "野生动物", "环保纪录", "健康纪录"
]

# 戏曲频道
xq_dictionary = [
    "CCTV11戏曲", "梨园频道", "七彩戏剧", "欢笑剧场", "央视戏曲", "河南戏曲", "陕西戏曲", "安徽戏曲", 
    "山西戏曲", "河北戏曲", "天津戏曲", "北京戏曲", "江苏戏曲", "浙江戏曲", "福建戏曲", "广东戏曲", 
    "四川戏曲", "云南戏曲", "湖南戏曲", "湖北戏曲", "京剧频道", "越剧频道", "黄梅戏", "豫剧频道", 
    "评剧频道", "昆曲频道", "粤剧频道", "川剧频道", "秦腔频道", "晋剧频道", "沪剧频道", "淮剧频道", 
    "汉剧频道", "湘剧频道", "赣剧频道", "闽剧频道", "桂剧频道", "滇剧频道", "藏剧频道", "少数民族戏曲"
]

# 解说频道
js_dictionary = [
    "体育解说", "电竞解说", "足球解说", "篮球解说", "赛车解说", "围棋解说", "象棋解说", "电竞直播", 
    "游戏解说", "赛事分析", "电竞分析", "体育评论", "游戏评论", "电竞评论", "体育脱口秀", "游戏脱口秀", 
    "电竞脱口秀", "体育新闻", "游戏新闻", "电竞新闻", "NBA解说", "英超解说", "西甲解说", "德甲解说",
    "法甲解说", "意甲解说", "中超解说", "CBA解说", "F1解说", "网球解说", "高尔夫解说", "斯诺克解说",
    "奥运会解说", "世界杯解说", "欧洲杯解说", "亚运会解说", "电竞大赛解说", "游戏大赛解说", "体育综艺解说"
]

# 春晚频道
cw_dictionary = [
    "春晚回放", "历年春晚", "春晚集锦", "春晚特别节目", "春晚倒计时", "春晚预告", "春晚花絮", 
    "春晚彩排", "春晚幕后", "春晚采访", "央视春晚", "卫视春晚", "网络春晚", "春晚精选", "春晚经典", 
    "春晚语言类", "春晚歌舞类", "春晚戏曲类", "春晚魔术类", "春晚相声小品", "春晚金曲", "春晚主持人", 
    "春晚观众", "春晚服装", "春晚舞台", "春晚技术", "春晚历史", "春晚文化", "春晚故事", "春晚记忆"
]

# NewTV频道
newtv_dictionary = [
    "NewTV动作电影", "NewTV家庭影院", "NewTV爱情喜剧", "NewTV惊悚悬疑", "NewTV古装剧场", 
    "NewTV军旅剧场", "NewTV乡村剧场", "NewTV都市剧场", "NewTV少儿动画", "NewTV精品体育", 
    "NewTV电竞世界", "NewTV明星大片", "NewTV海外剧场", "NewTV韩剧", "NewTV日剧", "NewTV泰剧",
    "NewTV欧美剧", "NewTV港台剧", "NewTV内地剧", "NewTV综艺娱乐", "NewTV音乐现场", "NewTV纪录片",
    "NewTV健康", "NewTV美食", "NewTV旅游", "NewTV时尚", "NewTV汽车", "NewTV房产", "NewTV教育",
    "NewTV科技", "NewTV财经"
]

# iHot频道
ihot_dictionary = [
    "iHot动作", "iHot喜剧", "iHot爱情", "iHot科幻", "iHot恐怖", "iHot战争", "iHot武侠", 
    "iHot警匪", "iHot悬疑", "iHot动漫", "iHot综艺", "iHot体育", "iHot音乐", "iHot纪录片", 
    "iHot少儿", "iHot教育", "iHot生活", "iHot时尚", "iHot旅游", "iHot美食", "iHot健康", 
    "iHot汽车", "iHot房产", "iHot财经", "iHot科技", "iHot军事", "iHot农业", "iHot戏曲", 
    "iHot文化", "iHot国际"
]

# 儿童频道
et_dictionary = [
    "CCTV14少儿", "卡酷少儿", "金鹰卡通", "优漫卡通", "嘉佳卡通", "炫动卡通", "哈哈炫动", 
    "宝贝家", "少儿动画", "动漫秀场", "卡通剧场", "动漫世界", "少儿剧场", "亲子频道", 
    "教育频道", "宝宝巴士", "贝瓦儿歌", "小小优酷", "小企鹅乐园", "芒果TV少儿", "爱奇艺少儿",
    "腾讯视频少儿", "优酷少儿", "B站少儿", "迪士尼少儿", "尼克少儿", "卡通网络", "天线宝宝",
    "小猪佩奇", "汪汪队立大功", "超级飞侠", "熊出没", "喜羊羊与灰太狼", "奥特曼", "精灵宝可梦",
    "哆啦A梦", "名侦探柯南", "海贼王", "火影忍者", "国产动画", "日本动画", "欧美动画"
]

# 综艺频道
zy_dictionary = [
    "CCTV3综艺", "湖南卫视", "浙江卫视", "东方卫视", "江苏卫视", "北京卫视", "安徽卫视", 
    "山东卫视", "天津卫视", "江西卫视", "深圳卫视", "广西卫视", "四川卫视", "重庆卫视", 
    "东南卫视", "贵州卫视", "云南卫视", "河北卫视", "湖北卫视", "辽宁卫视", "综艺频道",
    "娱乐频道", "搞笑频道", "选秀频道", "真人秀频道", "音乐综艺", "舞蹈综艺", "喜剧综艺",
    "访谈综艺", "游戏综艺", "美食综艺", "旅游综艺", "亲子综艺", "婚恋综艺", "职场综艺",
    "文化综艺", "益智综艺", "脱口秀", "晚会盛典", "颁奖典礼"
]

# 埋堆堆频道
mdd_dictionary = [
    "埋堆堆粤语", "埋堆堆港剧", "埋堆堆综艺", "埋堆堆电影", "埋堆堆动画", "埋堆堆音乐", 
    "埋堆堆娱乐", "埋堆堆新闻", "埋堆堆体育", "埋堆堆纪录片", "埋堆堆经典", "埋堆堆新剧",
    "埋堆堆合家欢", "埋堆堆武侠", "埋堆堆警匪", "埋堆堆家庭", "埋堆堆喜剧", "埋堆堆爱情",
    "埋堆堆悬疑", "埋堆堆古装", "埋堆堆时装", "埋堆堆职业", "埋堆堆医疗", "埋堆堆律政",
    "埋堆堆商战", "埋堆堆宫斗", "埋堆堆奇幻", "埋堆堆穿越", "埋堆堆历史", "埋堆堆民国"
]

# 音乐频道
yy_dictionary = [
    "CCTV15音乐", "MTV", "ChannelV", "音乐风云榜", "流行音乐", "经典音乐", "摇滚音乐", 
    "爵士音乐", "古典音乐", "民族音乐", "K歌频道", "演唱会", "音乐现场", "音乐资讯", 
    "音乐故事", "音乐MV", "音乐排行榜", "音乐电台", "网络音乐", "原创音乐", "中国好声音",
    "歌手", "蒙面唱将", "天籁之战", "声入人心", "乐队的夏天", "中国新说唱", "中国有嘻哈",
    "国风美少年", "明日之子", "创造营", "青春有你", "偶像练习生", "音乐大师课", "跨界歌王",
    "金曲捞", "我想和你唱", "中国音乐电视", "全球中文音乐榜上榜", "音乐盛典"
]

# 游戏频道
game_dictionary = [
    "游戏风云", "电竞天堂", "斗鱼游戏", "虎牙游戏", "企鹅电竞", "网易CC", "战旗TV", "火猫TV", 
    "熊猫游戏", "游戏竞技", "网游天地", "单机游戏", "手游直播", "主机游戏", "电竞新闻", 
    "游戏攻略", "游戏评测", "游戏资讯", "游戏赛事", "游戏解说", "英雄联盟", "王者荣耀", 
    "和平精英", "绝地求生", "DOTA2", "CSGO", "魔兽世界", "守望先锋", "原神", "崩坏3", 
    "阴阳师", "第五人格", "明日方舟", "碧蓝航线", "FIFA", "NBA2K", "实况足球", "街霸", 
    "拳皇", "主机游戏"
]

# 收音机频道
radio_dictionary = [
    "中国之声", "经济之声", "音乐之声", "经典音乐", "台海之声", "神州之声", "大湾区之声", 
    "民族之声", "文艺之声", "老年之声", "藏语广播", "阅读之声", "维吾尔语广播", "香港之声", 
    "中国交通广播", "中国乡村之声", "哈萨克语广播", "国家应急广播", "轻松调频", "劲曲调频",
    "北京交通广播", "上海交通广播", "广东交通广播", "深圳交通广播", "天津交通广播", "重庆交通广播",
    "江苏交通广播", "浙江交通广播", "四川交通广播", "湖南交通广播", "湖北交通广播", "河南交通广播",
    "河北交通广播", "山东交通广播", "山西交通广播", "陕西交通广播", "辽宁交通广播", "吉林交通广播",
    "黑龙江交通广播", "安徽交通广播", "福建交通广播", "江西交通广播", "广西交通广播", "海南交通广播",
    "贵州交通广播", "云南交通广播", "甘肃交通广播", "青海交通广播", "宁夏交通广播", "新疆交通广播",
    "内蒙古交通广播"
]

# 直播中国频道
zb_dictionary = [
    "直播中国", "中国直播", "现场直播", "直播现场", "实时直播", "直播新闻", "直播体育", 
    "直播娱乐", "直播音乐", "直播游戏", "直播旅游", "直播美食", "直播购物", "直播教育", 
    "直播健康", "直播科技", "直播财经", "直播农业", "直播汽车", "直播房产", "直播家居",
    "直播时尚", "直播美妆", "直播健身", "直播宠物", "直播户外", "直播探险", "直播自然",
    "直播城市", "直播乡村", "直播交通", "直播天气", "直播事件", "直播活动", "直播会议",
    "直播展会", "直播演出", "直播比赛", "直播课堂", "直播讲座"
]

# MTV频道
mtv_dictionary = [
    "MTV中文", "MTV国际", "MTV音乐", "MTV现场", "MTV经典", "MTV流行", "MTV摇滚", 
    "MTV舞曲", "MTV嘻哈", "MTV亚洲", "MTV欧美", "MTV日韩", "MTV华语", "MTV排行榜", 
    "MTV演唱会", "MTV颁奖", "MTV幕后", "MTV资讯", "MTV特别节目", "MTV点播", "MTV不插电",
    "MTV原音重现", "MTV新声代", "MTV巨星", "MTV金曲", "MTV经典回顾", "MTV音乐录影带",
    "MTV音乐故事", "MTV音乐现场"
]

# 咪咕直播频道
migu_dictionary = [
    "咪咕视频", "咪咕体育", "咪咕影院", "咪咕动漫", "咪咕综艺", "咪咕音乐", "咪咕游戏", 
    "咪咕直播", "咪咕剧场", "咪咕纪实", "咪咕少儿", "咪咕健康", "咪咕教育", "咪咕购物", 
    "咪咕汽车", "咪咕旅游", "咪咕美食", "咪咕时尚", "咪咕财经", "咪咕科技", "咪咕文化",
    "咪咕戏曲", "咪咕军事", "咪咕农业", "咪咕国际", "咪咕4K", "咪咕8K", "咪咕VR", 
    "咪咕云游戏", "咪咕阅读", "咪咕听书"
]

# ========== 国际频道字典 ==========
# 日本频道
jp_dictionary = [
    "NHK综合", "NHK教育", "NHKBS1", "NHKBS4K", "NHKBS8K", "日本电视台", "朝日电视台", 
    "TBS电视台", "东京电视台", "富士电视台", "WOWOW", "BS朝日", "BS东京", "BS-TBS", 
    "BS富士", "BS日本", "BS11", "东京MX", "大阪电视台", "爱知电视台", "北海道电视台",
    "仙台放送", "名古屋电视台", "广岛电视台", "福冈电视台", "琉球放送", "日视新闻24",
    "朝日新闻", "TBS新闻", "富士新闻", "东京新闻", "日本经济新闻", "东京MX2", "大阪TVO",
    "神奈川TV", "千叶TV", "埼玉TV", "京都TV", "奈良TV", "和歌山TV", "山口TV"
]

# 韩国频道
kr_dictionary = [
    "KBS1", "KBS2", "KBSWorld", "MBC", "SBS", "EBS", "MBN", "TV朝鲜", "JTBC", "ChannelA",
    "YTN", "Arirang", "KBS드라마", "KBSN스포츠", "MBC드라마", "SBS플러스", "SBS골프", 
    "MBC에브리원", "MBCM", "SBSfunE", "tvN", "OCN", "Mnet", "Tooniverse", "Cartoon Network",
    "Disney Channel", "National Geographic", "Discovery", "History", "EBS1", "EBS2", "EBS English",
    "EBS Kids", "EBS Plus1", "EBS Plus2", "KBS Joy", "KBS N Life", "KBS W", "MBC Every1",
    "MBC Sports+", "SBS MTV", "SBS CNBC", "YTN Science", "YTN DMB", "YTN Radio"
]

# 美国频道
us_dictionary = [
    "ABC", "CBS", "NBC", "FOX", "CW", "PBS", "CNN", "Fox News", "MSNBC", "CNBC",
    "HBO", "Showtime", "Starz", "Cinemax", "AMC", "FX", "USA", "TNT", "TBS", "ESPN",
    "Disney Channel", "Nickelodeon", "Cartoon Network", "Comedy Central", "MTV", "VH1", 
    "BET", "Lifetime", "A&E", "History", "Discovery", "National Geographic", "Animal Planet",
    "TLC", "Food Network", "HGTV", "Travel Channel", "Syfy", "Bravo", "E!", "HSN", "QVC",
    "Weather Channel", "C-SPAN", "Bloomberg TV", "Fox Business", "CNBC World", "BBC America",
    "Telemundo", "Univision"
]

# 法国频道
fr_dictionary = [
    "TF1", "France 2", "France 3", "France 4", "France 5", "M6", "Arte", "C8", "W9", "TMC",
    "TFX", "NRJ 12", "LCP", "BFMTV", "CNews", "France Info", "Gulli", "France 24", "TV5Monde", 
    "Canal+", "Canal+ Sport", "Canal+ Cinéma", "Canal+ Séries", "Canal+ Family", "Canal+ Docs",
    "Canal+ Kids", "Canal+ Grand Écran", "Canal+ Box Office", "Canal+ 360", "Canal+ Foot",
    "RMC Sport", "beIN Sports", "Eurosport", "OL TV", "Paris Première", "Téva", "MCM", "MCM Top",
    "MCM Pop", "Trace Urban", "Trace Tropical", "Trace Africa", "Trace Latina", "Trace Sport Stars",
    "Trace Gospel", "Trace TV", "Trace Urban Brasil", "Trace Mziki", "Trace Naija"
]

# 英国频道
uk_dictionary = [
    "BBC One", "BBC Two", "BBC Three", "BBC Four", "BBC News", "BBC Parliament", "CBBC", "CBeebies", 
    "ITV", "Channel 4", "Channel 5", "Sky News", "Sky Sports", "Sky Cinema", "Sky Atlantic", 
    "Sky One", "Sky Two", "Sky Arts", "Discovery", "National Geographic", "Disney Channel", 
    "Nickelodeon", "Cartoon Network", "Comedy Central", "MTV", "VH1", "BET", "Lifetime", "A&E",
    "History", "Animal Planet", "TLC", "Food Network", "HGTV", "Travel Channel", "Syfy", "Bravo",
    "E!", "HSN", "QVC", "Weather Channel", "C-SPAN", "Bloomberg TV", "CNBC", "Fox News", "CNN",
    "BBC World News", "Al Jazeera English", "France 24 English", "RT UK", "S4C", "STV", "UTV"
]

# 德国频道
de_dictionary = [
    "Das Erste", "ZDF", "RTL", "Sat.1", "ProSieben", "VOX", "Kabel Eins", "RTL II", "Super RTL", 
    "n-tv", "Phoenix", "Arte", "3sat", "KiKA", "Disney Channel", "MTV", "VIVA", "Sport1", "Eurosport", 
    "DW", "ARD alpha", "One", "Tagesschau24", "ZDFinfo", "ZDFneo", "Comedy Central", "Nickelodeon", 
    "Cartoon Network", "Boomerang", "Disney Junior", "Disney XD", "TNT Film", "TNT Serie", "Syfy",
    "13th Street", "Universal TV", "History", "Discovery Channel", "National Geographic", "Animal Planet",
    "Spiegel Geschichte", "Spiegel TV Wissen", "N24 Doku", "Welt", "N-TV", "Bild", "RTL Crime", 
    "RTL Living", "RTL Passion", "Sat.1 Gold", "ProSieben MAXX", "kabel eins Doku", "kabel eins classics"
]

# 俄罗斯频道
ru_dictionary = [
    "Первый канал", "Россия 1", "Матч ТВ", "НТВ", "Пятый канал", "Россия К", "Россия 24", 
    "Карусель", "ОТР", "ТВ Центр", "Рен ТВ", "Спас", "СТС", "Домашний", "ТВ-3", "Звезда", 
    "Мир", "ТНТ", "Муз ТВ", "2x2", "Пятница", "Ю", "Супер", "ТВ-6", "Домашние животные", 
    "Телепутешествия", "Наука 2.0", "История", "Культура", "Мосфильм", "Кинопоказ", "Киносемья", 
    "Киномикс", "Кинохит", "Киносерия", "Киноужас", "Кинокомедия", "Кинороман", "Мужское кино", 
    "Женское кино", "Детский мир", "Мульт", "Мультимузыка", "Канал Disney", "Cartoon Network", 
    "Nickelodeon", "Boomerang", "Discovery Channel", "National Geographic", "Animal Planet", "Viasat Nature"
]

# 加拿大频道
ca_dictionary = [
    "CBC", "CTV", "Global", "Citytv", "Omni", "TVO", "TFO", "Radio-Canada", "Télé-Québec", 
    "CPAC", "CBC News Network", "CTV News Channel", "Global News", "The Weather Network", 
    "Sportsnet", "TSN", "RDS", "TVA", "Zeste", "Canal D", "Canal Vie", "V", "Noovo", 
    "TVA Sports", "RDS Info", "Canal M", "Télé-Québec HD", "Unis TV", "Télévision francophone de l'Ontario",
    "APTN", "Aboriginal Peoples Television Network", "OutTV", "Fight Network", "GameTV", "Adult Swim",
    "Cartoon Network", "Disney Channel", "Family Channel", "YTV", "Treehouse", "Teletoon", "Disney Junior",
    "Discovery", "Animal Planet", "History", "HGTV", "Food Network", "Slice", "W Network", "Showcase",
    "Bravo", "CTV Drama", "CTV Life", "CTV Comedy", "CBC Gem", "Crave", "Club Illico", "Tou.tv"
]

# 澳大利亚频道
au_dictionary = [
    "ABC", "SBS", "Seven Network", "Nine Network", "Network Ten", "ABC News", "SBS News", 
    "7 News", "9 News", "10 News", "ABC Kids", "ABC ME", "ABC TV Plus", "SBS Food", 
    "SBS Sport", "SBS Turkish", "SBS Chinese", "SBS Arabic", "SBS Italian", "SBS Korean",
    "SBS Vietnamese", "SBS Greek", "SBS Spanish", "SBS Punjabi", "SBS Hindi", "SBS Urdu",
    "SBS Indonesian", "SBS Japanese", "SBS French", "SBS German", "SBS World Movies", 
    "SBS Viceland", "SBS WorldWatch", "7TWO", "7mate", "7flix", "7Bravo", "9Go!", "9Gem",
    "9Life", "9Rush", "10 Bold", "10 Peach", "10 Shake", "TVSN", "Expo", "Racing.com", 
    "Sky News Australia", "Foxtel", "Fox Sports", "Fox Footy", "Fox League", "Fox Cricket",
    "Fox Netball", "Fox Motorsport", "Fox Basketball", "Fox Baseball", "Fox Soccer", "Fox Rugby"
]

# 印度频道
in_dictionary = [
    "DD National", "DD News", "DD India", "DD Retro", "DD Urdu", "DD Kisan", "DD Chandana", 
    "Sony", "Star Plus", "Zee TV", "Colors", "Sun TV", "Vijay", "Asianet", "ETV", "ABP News", 
    "Republic TV", "Times Now", "India TV", "Aaj Tak", "Zee News", "NDTV India", "NDTV 24x7", 
    "CNN-News18", "India Today", "News18 India", "News18 Tamil Nadu", "News18 Kerala", "News18 Kannada",
    "News18 Bangla", "News18 Odia", "News18 Assam/North East", "News18 Gujarati", "News18 Rajasthan",
    "News18 Uttar Pradesh/Uttarakhand", "News18 Madhya Pradesh/Chhattisgarh", "News18 Bihar/Jharkhand",
    "News18 Lokmat", "News18 Punjab/Haryana/Himachal", "CNBC-TV18", "ET Now", "Bloomberg Quint",
    "Zee Business", "NDTV Profit", "CNBC Awaaz", "ETV Telugu", "ETV Kannada", "ETV Bangla", "ETV Gujarati",
    "ETV Marathi", "ETV Urdu", "ETV Cinema", "ETV Life", "ETV Abhiruchi", "ETV Plus", "ETV Andhra Pradesh",
    "ETV Telangana", "Gemini TV", "Gemini Movies", "Gemini Music", "Gemini Life", "Gemini Comedy"
]

# 菲律宾频道
ph_dictionary = [
    "ABS-CBN", "GMA", "TV5", "CNN Philippines", "ANC", "PTV", "IBC", "UNTV", "NET25", "SMNI News",
    "TAP", "Cine Mo", "A2Z", "GTV", "Heart of Asia", "Hallypop", "I Heart Movies", "Pinoy Box Office",
    "Sari-Sari", "Knowledge", "Cinema One", "Myx", "ABS-CBN News Channel", "DZMM TeleRadyo", "GMA News TV",
    "GMA Public Affairs", "GMA Life TV", "GMA Pinoy TV", "GMA News TV International", "Kapamilya Channel",
    "Kapamilya Online Live", "TFC", "The Filipino Channel", "CinemaWorld", "Tag", "Kapatid TV5", "One Sports",
    "One PH", "One News", "One Screen", "PBA Rush", "Sari-Sari Channel", "Shop TV", "Solar Sports", "Solar All Access",
    "Solar Learning", "Solar News Channel", "DepEd TV", "Knowledge Channel", "Yey", "O Shopping", "CT"
]

# 新加坡频道
sg_dictionary = [
    "Channel 5", "Channel 8", "Channel U", "Suria", "Vasantham", "CNA", "Okto", "Channel NewsAsia",
    "BBC Knowledge", "BBC Lifestyle", "FOX", "HBO", "Star World", "AXN", "Animax", "Disney", 
    "Cartoon Network", "Discovery", "National Geographic", "History", "Disney Junior", "Disney XD",
    "Nickelodeon", "Nick Jr.", "Boomerang", "Warner TV", "E!", "Lifetime", "TLC", "Food Network",
    "HGTV", "Asian Food Network", "BBC Earth", "Animal Planet", "CBeebies", "Discovery Asia", 
    "Discovery Science", "Discovery Turbo", "History Asia", "Nat Geo Wild", "Nat Geo People",
    "SPOTV", "SPOTV 2", "beIN Sports", "beIN Sports 2", "beIN Sports 3", "Fight Sports", 
    "Eurosport", "Premier Football", "WWE Network", "KIX", "HITS", "HITS Movies", "Celestial Movies"
]

# 马来西亚频道
my_dictionary = [
    "RTM1", "RTM2", "TV3", "NTV7", "8TV", "TV9", "Astro Awani", "Bernama TV", "TV Alhijrah", 
    "TV Okey", "TV Sukan", "TV IQ", "TV Berita", "TV Bual", "TV Filem", "TV Hiburan", "TV Pendidikan",
    "TV Agama", "TV Keluarga", "TV Anak", "Astro Ria", "Astro Prima", "Astro Oasis", "Astro Warna",
    "Astro Citra", "Astro Aura", "Astro Rania", "Astro AEC", "Astro Xiao Tai Yang", "Astro Ceria",
    "Astro Tutor TV", "Astro Shaw", "Astro Vaanavil", "Astro Vinmeen", "Astro Vellithirai", "Astro Box Office",
    "Astro First", "Astro Best", "Astro Hua Hee Dai", "Astro AOD", "HBO", "Cinemax", "FOX", "FOX Sports",
    "FOX Movies", "FOX Life", "FX", "Disney Channel", "Disney Junior", "Cartoon Network", "Boomerang",
    "Nickelodeon", "Discovery", "Animal Planet", "History", "National Geographic", "Nat Geo Wild", "BBC Earth"
]

# 泰国频道
th_dictionary = [
    "Channel 7", "Channel 3", "Channel 5", "Channel 8", "Channel 9", "NBT", "Thai PBS", "PPTV", 
    "Workpoint", "GMM25", "One 31", "Amarin TV", "TNN24", "Spring News", "Voice TV", "JKN18", 
    "MONO29", "Thairath TV", "T-Sports", "True4U", "MCOT", "Modernine TV", "Thai TV", "Ch7 HD",
    "Ch3 HD", "Ch5 HD", "Ch8 HD", "Ch9 HD", "Thai PBS HD", "PPTV HD", "Workpoint HD", "GMM25 HD",
    "One 31 HD", "Amarin TV HD", "TNN24 HD", "Spring News HD", "Voice TV HD", "JKN18 HD", "MONO29 HD",
    "Thairath TV HD", "T-Sports HD", "True4U HD", "MCOT HD", "Modernine TV HD", "Thai TV HD", "Ch7 SD",
    "Ch3 SD", "Ch5 SD", "Ch8 SD", "Ch9 SD", "Thai PBS SD"
]

# 越南频道
vn_dictionary = [
    "VTV1", "VTV2", "VTV3", "VTV4", "VTV5", "VTV6", "VTV7", "VTV8", "VTV9", "HTV1",
    "HTV2", "HTV3", "HTV4", "HTV7", "HTV9", "THVL1", "THVL2", "QPVN", "Hanoi TV", "Hai Phong TV",
    "Da Nang TV", "Can Tho TV", "Binh Duong TV", "Dong Nai TV", "Khanh Hoa TV", "Lam Dong TV", 
    "Quang Nam TV", "Quang Ninh TV", "Thanh Hoa TV", "Nghe An TV", "Ha Tinh TV", "Quang Binh TV",
    "Thua Thien Hue TV", "Quang Tri TV", "Quang Ngai TV", "Binh Dinh TV", "Phu Yen TV", "Khanh Hoa TV",
    "Ninh Thuan TV", "Binh Thuan TV", "Kon Tum TV", "Gia Lai TV", "Dak Lak TV", "Dak Nong TV",
    "Lam Dong TV", "Binh Phuoc TV", "Tay Ninh TV", "Binh Thuan TV", "Ba Ria Vung Tau TV", "Long An TV"
]

# ========== 地方台字典 ==========
# 上海频道
sh_dictionary = [
    "东方卫视", "上海新闻综合", "上海都市", "上海东方影视", "上海娱乐", "上海电视剧", "上海纪实", 
    "上海外语", "上海哈哈炫动", "上海第一财经", "上海五星体育", "上海艺术人文", "上海生活时尚", 
    "上海法治天地", "上海七彩戏剧", "上海东方购物", "上海教育", "上海嘉定", "上海松江", "上海浦东",
    "上海闵行", "上海宝山", "上海青浦", "上海奉贤", "上海金山", "上海崇明", "上海嘉定生活", "上海松江综合",
    "上海浦东新闻", "上海闵行新闻", "上海宝山新闻", "上海青浦新闻", "上海奉贤新闻", "上海金山新闻",
    "上海崇明新闻", "上海移动电视", "上海地铁电视", "上海公交电视", "上海楼宇电视", "上海户外大屏"
]

# 浙江频道
zj_dictionary = [
    "浙江卫视", "浙江钱江都市", "浙江经济生活", "浙江教育科技", "浙江影视娱乐", "浙江民生休闲", 
    "浙江公共新闻", "浙江少儿", "浙江国际", "杭州综合", "杭州西湖明珠", "杭州生活", "杭州影视", 
    "杭州少儿", "宁波新闻", "宁波经济", "宁波社会生活", "宁波影视", "宁波少儿", "温州新闻",
    "温州经济", "温州都市", "温州公共", "温州影视", "温州少儿", "绍兴新闻", "绍兴公共", "绍兴影视",
    "绍兴文化", "绍兴教育", "湖州新闻", "湖州文化娱乐", "湖州公共", "湖州影视", "湖州教育科技",
    "嘉兴新闻", "嘉兴公共", "嘉兴文化影视", "嘉兴教育", "嘉兴科技", "金华新闻", "金华教育科技",
    "金华公共", "金华影视", "金华都市", "衢州新闻", "衢州公共", "衢州影视", "衢州教育", "衢州文化"
]

# 江苏频道
jsu_dictionary = [
    "江苏卫视", "江苏城市", "江苏综艺", "江苏影视", "江苏公共新闻", "江苏教育", "江苏体育休闲", 
    "江苏国际", "南京新闻", "南京教科", "南京娱乐", "南京生活", "南京影视", "南京少儿", "南京十八",
    "苏州新闻", "苏州社会经济", "苏州文化生活", "苏州电影", "无锡新闻", "无锡都市", "无锡娱乐",
    "无锡影视", "无锡生活", "无锡教育", "常州新闻", "常州都市", "常州影视", "常州生活", "常州教育",
    "南通新闻", "南通都市", "南通影视", "南通生活", "南通教育", "扬州新闻", "扬州城市", "扬州影视",
    "扬州生活", "扬州教育", "镇江新闻", "镇江都市", "镇江影视", "镇江生活", "镇江教育", "徐州新闻",
    "徐州都市", "徐州影视", "徐州生活", "徐州教育"
]

# 广东频道
gd_dictionary = [
    "广东卫视", "珠江台", "广东体育", "广东新闻", "广东公共", "广东经济科教", "广东影视", "广东少儿", 
    "广东国际", "南方卫视", "深圳卫视", "深圳都市", "深圳电视剧", "深圳娱乐", "深圳体育健康", 
    "深圳公共", "深圳少儿", "广州综合", "广州新闻", "广州影视", "广州竞赛", "广州生活", "广州少儿",
    "佛山新闻", "佛山公共", "佛山影视", "佛山生活", "佛山少儿", "东莞新闻", "东莞公共", "东莞影视",
    "东莞生活", "东莞少儿", "中山新闻", "中山公共", "中山影视", "中山生活", "中山教育", "珠海新闻",
    "珠海公共", "珠海影视", "珠海生活", "珠海教育", "惠州新闻", "惠州公共", "惠州影视", "惠州生活",
    "惠州教育", "汕头新闻", "汕头公共", "汕头影视", "汕头生活", "汕头教育"
]

# 湖南频道
hn_dictionary = [
    "湖南卫视", "湖南经视", "湖南都市", "湖南娱乐", "湖南电视剧", "湖南公共", "湖南国际", "湖南教育", 
    "长沙新闻", "长沙政法", "长沙女性", "长沙经贸", "长沙移动", "湘潭新闻", "株洲新闻", "衡阳新闻", 
    "岳阳新闻", "常德新闻", "张家界新闻", "益阳新闻", "郴州新闻", "永州新闻", "怀化新闻", "娄底新闻",
    "湘西新闻", "长沙公共", "湘潭公共", "株洲公共", "衡阳公共", "岳阳公共", "常德公共", "张家界公共",
    "益阳公共", "郴州公共", "永州公共", "怀化公共", "娄底公共", "湘西公共", "长沙影视", "湘潭影视",
    "株洲影视", "衡阳影视", "岳阳影视", "常德影视", "张家界影视", "益阳影视", "郴州影视", "永州影视",
    "怀化影视", "娄底影视", "湘西影视"
]

# 安徽频道
ah_dictionary = [
    "安徽卫视", "安徽经视", "安徽公共", "安徽影视", "安徽综艺", "安徽农业科教", "安徽国际", 
    "合肥新闻", "合肥生活", "合肥教育", "合肥财经", "芜湖新闻", "蚌埠新闻", "淮南新闻", "马鞍山新闻", 
    "淮北新闻", "铜陵新闻", "安庆新闻", "黄山新闻", "阜阳新闻", "宿州新闻", "滁州新闻", "六安新闻",
    "宣城新闻", "池州新闻", "亳州新闻", "合肥公共", "芜湖公共", "蚌埠公共", "淮南公共", "马鞍山公共",
    "淮北公共", "铜陵公共", "安庆公共", "黄山公共", "阜阳公共", "宿州公共", "滁州公共", "六安公共",
    "宣城公共", "池州公共", "亳州公共", "合肥影视", "芜湖影视", "蚌埠影视", "淮南影视", "马鞍山影视",
    "淮北影视", "铜陵影视", "安庆影视", "黄山影视"
]

# 海南频道
hain_dictionary = [
    "海南卫视", "海南综合", "海南文旅", "海南公共", "海南影视", "海南少儿", "海口新闻", "海口生活", 
    "海口娱乐", "三亚新闻", "三亚生活", "三沙卫视", "琼海新闻", "儋州新闻", "文昌新闻", "万宁新闻", 
    "东方新闻", "五指山新闻", "乐东新闻", "澄迈新闻", "临高新闻", "定安新闻", "屯昌新闻", "昌江新闻",
    "白沙新闻", "琼中新闻", "保亭新闻", "陵水新闻", "海口公共", "三亚公共", "琼海公共", "儋州公共",
    "文昌公共", "万宁公共", "东方公共", "五指山公共", "乐东公共", "澄迈公共", "临高公共", "定安公共",
    "屯昌公共", "昌江公共", "白沙公共", "琼中公共", "保亭公共", "陵水公共", "海口影视", "三亚影视",
    "琼海影视", "儋州影视"
]

# 内蒙频道
nm_dictionary = [
    "内蒙古卫视", "内蒙古蒙语", "内蒙古新闻", "内蒙古经济", "内蒙古影视", "内蒙古少儿", "呼和浩特新闻", 
    "包头新闻", "呼伦贝尔新闻", "兴安盟新闻", "通辽新闻", "赤峰新闻", "锡林郭勒新闻", "乌兰察布新闻", 
    "鄂尔多斯新闻", "巴彦淖尔新闻", "乌海新闻", "阿拉善新闻", "满洲里新闻", "二连浩特新闻", "呼和浩特公共",
    "包头公共", "呼伦贝尔公共", "兴安盟公共", "通辽公共", "赤峰公共", "锡林郭勒公共", "乌兰察布公共",
    "鄂尔多斯公共", "巴彦淖尔公共", "乌海公共", "阿拉善公共", "呼和浩特影视", "包头影视", "呼伦贝尔影视",
    "兴安盟影视", "通辽影视", "赤峰影视", "锡林郭勒影视", "乌兰察布影视", "鄂尔多斯影视", "巴彦淖尔影视",
    "乌海影视", "阿拉善影视", "呼和浩特少儿", "包头少儿", "呼伦贝尔少儿", "兴安盟少儿", "通辽少儿",
    "赤峰少儿", "锡林郭勒少儿", "乌兰察布少儿"
]

# 湖北频道
hb_dictionary = [
    "湖北卫视", "湖北综合", "湖北经视", "湖北影视", "湖北教育", "湖北生活", "湖北公共", "湖北垄上", 
    "武汉新闻", "武汉电视剧", "武汉文体", "武汉外语", "武汉少儿", "武汉教育", "黄石新闻", "十堰新闻", 
    "宜昌新闻", "襄阳新闻", "鄂州新闻", "荆门新闻", "孝感新闻", "荆州新闻", "黄冈新闻", "咸宁新闻",
    "随州新闻", "恩施新闻", "仙桃新闻", "潜江新闻", "天门新闻", "神农架新闻", "武汉公共", "黄石公共",
    "十堰公共", "宜昌公共", "襄阳公共", "鄂州公共", "荆门公共", "孝感公共", "荆州公共", "黄冈公共",
    "咸宁公共", "随州公共", "恩施公共", "仙桃公共", "潜江公共", "天门公共", "神农架公共", "武汉影视",
    "黄石影视", "十堰影视"
]

# 辽宁频道
ln_dictionary = [
    "辽宁卫视", "辽宁都市", "辽宁影视", "辽宁生活", "辽宁公共", "辽宁教育", "辽宁体育", "辽宁经济", 
    "沈阳新闻", "沈阳公共", "沈阳影视", "大连新闻", "大连公共", "大连文体", "大连影视", "鞍山新闻", 
    "抚顺新闻", "本溪新闻", "丹东新闻", "锦州新闻", "营口新闻", "阜新新闻", "辽阳新闻", "盘锦新闻",
    "铁岭新闻", "朝阳新闻", "葫芦岛新闻", "沈阳生活", "大连生活", "鞍山生活", "抚顺生活", "本溪生活",
    "丹东生活", "锦州生活", "营口生活", "阜新生活", "辽阳生活", "盘锦生活", "铁岭生活", "朝阳生活",
    "葫芦岛生活", "沈阳教育", "大连教育", "鞍山教育", "抚顺教育", "本溪教育", "丹东教育", "锦州教育",
    "营口教育", "阜新教育"
]

# 陕西频道
sx_dictionary = [
    "陕西卫视", "陕西新闻", "陕西都市", "陕西影视", "陕西公共", "陕西体育", "陕西生活", "西安新闻", 
    "西安都市", "西安影视", "西安商务", "西安教育", "宝鸡新闻", "咸阳新闻", "渭南新闻", "铜川新闻", 
    "延安新闻", "榆林新闻", "汉中新闻", "安康新闻", "商洛新闻", "西安公共", "宝鸡公共", "咸阳公共",
    "渭南公共", "铜川公共", "延安公共", "榆林公共", "汉中公共", "安康公共", "商洛公共", "西安生活",
    "宝鸡生活", "咸阳生活", "渭南生活", "铜川生活", "延安生活", "榆林生活", "汉中生活", "安康生活",
    "商洛生活", "西安教育", "宝鸡教育", "咸阳教育", "渭南教育", "铜川教育", "延安教育", "榆林教育",
    "汉中教育", "安康教育"
]

# 山西频道
shanxi_dictionary = [
    "山西卫视", "山西新闻", "山西经济", "山西影视", "山西公共", "山西少儿", "山西黄河", "太原新闻", 
    "太原文体", "太原影视", "太原教育", "大同新闻", "阳泉新闻", "长治新闻", "晋城新闻", "朔州新闻", 
    "晋中新闻", "运城新闻", "忻州新闻", "临汾新闻", "吕梁新闻", "太原公共", "大同公共", "阳泉公共",
    "长治公共", "晋城公共", "朔州公共", "晋中公共", "运城公共", "忻州公共", "临汾公共", "吕梁公共",
    "太原影视", "大同影视", "阳泉影视", "长治影视", "晋城影视", "朔州影视", "晋中影视", "运城影视",
    "忻州影视", "临汾影视", "吕梁影视", "太原少儿", "大同少儿", "阳泉少儿", "长治少儿", "晋城少儿",
    "朔州少儿", "晋中少儿"
]

# 山东频道
shandong_dictionary = [
    "山东卫视", "山东齐鲁", "山东体育", "山东影视", "山东生活", "山东公共", "山东少儿", "山东国际", 
    "济南新闻", "济南都市", "济南影视", "济南生活", "青岛新闻", "青岛生活", "青岛影视", "青岛都市", 
    "淄博新闻", "枣庄新闻", "东营新闻", "烟台新闻", "潍坊新闻", "济宁新闻", "泰安新闻", "威海新闻",
    "日照新闻", "滨州新闻", "德州新闻", "聊城新闻", "临沂新闻", "菏泽新闻", "济南公共", "青岛公共",
    "淄博公共", "枣庄公共", "东营公共", "烟台公共", "潍坊公共", "济宁公共", "泰安公共", "威海公共",
    "日照公共", "滨州公共", "德州公共", "聊城公共", "临沂公共", "菏泽公共", "济南影视", "青岛影视",
    "淄博影视", "枣庄影视"
]

# 云南频道
yunnan_dictionary = [
    "云南卫视", "云南都市", "云南娱乐", "云南影视", "云南公共", "云南少儿", "云南国际", "昆明新闻", 
    "昆明春城民生", "昆明影视频道", "曲靖新闻", "玉溪新闻", "保山新闻", "昭通新闻", "丽江新闻", 
    "普洱新闻", "临沧新闻", "楚雄新闻", "红河新闻", "文山新闻", "西双版纳新闻", "大理新闻", "德宏新闻",
    "怒江新闻", "迪庆新闻", "昆明公共", "曲靖公共", "玉溪公共", "保山公共", "昭通公共", "丽江公共",
    "普洱公共", "临沧公共", "楚雄公共", "红河公共", "文山公共", "西双版纳公共", "大理公共", "德宏公共",
    "怒江公共", "迪庆公共", "昆明影视", "曲靖影视", "玉溪影视", "保山影视", "昭通影视", "丽江影视",
    "普洱影视", "临沧影视"
]

# 北京频道
bj_dictionary = [
    "北京卫视", "北京新闻", "北京财经", "北京影视", "北京科教", "北京生活", "北京文艺", "北京青年", 
    "北京卡酷", "北京纪实", "北京冬奥", "北京国际", "BRTV新闻", "BRTV财经", "BRTV影视", "BRTV生活", 
    "BRTV科教", "BRTV文艺", "BRTV青年", "BRTV卡酷", "BRTV纪实", "BRTV冬奥纪实", "BRTV国际", "BRTV体育",
    "BRTV戏曲", "BRTV音乐", "BRTV动画", "BRTV少儿", "BRTV生活频道", "BRTV财经频道", "BRTV影视剧频道",
    "BRTV科教频道", "BRTV文艺频道", "BRTV青年频道", "BRTV卡酷少儿", "BRTV纪实科教", "BRTV冬奥纪实4K",
    "BRTV国际频道", "BRTV体育休闲", "BRTV戏曲频道", "BRTV音乐频道", "BRTV动画频道", "BRTV少儿频道",
    "BRTV生活", "BRTV财经", "BRTV影视", "BRTV科教", "BRTV文艺", "BRTV青年", "BRTV卡酷", "BRTV纪实"
]

# 重庆频道
cq_dictionary = [
    "重庆卫视", "重庆新闻", "重庆影视", "重庆文体娱乐", "重庆社会法制", "重庆时尚生活", "重庆公共", 
    "重庆少儿", "重庆国际", "万州新闻", "涪陵新闻", "渝中新闻", "大渡口新闻", "江北新闻", "沙坪坝新闻", 
    "九龙坡新闻", "南岸新闻", "北碚新闻", "渝北新闻", "巴南新闻", "长寿新闻", "江津新闻", "合川新闻",
    "永川新闻", "南川新闻", "綦江新闻", "大足新闻", "璧山新闻", "铜梁新闻", "潼南新闻", "荣昌新闻",
    "开州新闻", "梁平新闻", "武隆新闻", "城口新闻", "丰都新闻", "垫江新闻", "忠县新闻", "云阳新闻",
    "奉节新闻", "巫山新闻", "巫溪新闻", "石柱新闻", "秀山新闻", "酉阳新闻", "彭水新闻", "重庆公共新闻",
    "重庆影视文艺", "重庆时尚生活", "重庆社会与法", "重庆文体娱乐", "重庆少儿"
]

# 福建频道
fj_dictionary = [
    "东南卫视", "福建综合", "福建新闻", "福建电视剧", "福建公共", "福建经济", "福建体育", "福建少儿", 
    "福建国际", "福州新闻", "福州生活", "福州少儿", "福州影视", "厦门卫视", "厦门新闻", "厦门生活", 
    "厦门影视", "厦门少儿", "泉州新闻", "莆田新闻", "三明新闻", "漳州新闻", "南平新闻", "龙岩新闻",
    "宁德新闻", "福州公共", "厦门公共", "泉州公共", "莆田公共", "三明公共", "漳州公共", "南平公共",
    "龙岩公共", "宁德公共", "福州影视", "厦门影视", "泉州影视", "莆田影视", "三明影视", "漳州影视",
    "南平影视", "龙岩影视", "宁德影视", "福州少儿", "厦门少儿", "泉州少儿", "莆田少儿", "三明少儿",
    "漳州少儿", "南平少儿"
]

# 甘肃频道
gs_dictionary = [
    "甘肃卫视", "甘肃新闻", "甘肃经济", "甘肃文化影视", "甘肃公共", "甘肃少儿", "兰州新闻", "兰州生活", 
    "兰州综艺", "兰州公共", "嘉峪关新闻", "金昌新闻", "白银新闻", "天水新闻", "武威新闻", "张掖新闻", 
    "平凉新闻", "酒泉新闻", "庆阳新闻", "定西新闻", "陇南新闻", "临夏新闻", "甘南新闻", "兰州公共",
    "嘉峪关公共", "金昌公共", "白银公共", "天水公共", "武威公共", "张掖公共", "平凉公共", "酒泉公共",
    "庆阳公共", "定西公共", "陇南公共", "临夏公共", "甘南公共", "兰州影视", "嘉峪关影视", "金昌影视",
    "白银影视", "天水影视", "武威影视", "张掖影视", "平凉影视", "酒泉影视", "庆阳影视", "定西影视",
    "陇南影视", "临夏影视"
]

# 广西频道
gx_dictionary = [
    "广西卫视", "广西新闻", "广西综艺", "广西影视", "广西公共", "广西国际", "南宁新闻", "南宁都市", 
    "南宁影视", "南宁公共", "柳州新闻", "桂林新闻", "梧州新闻", "北海新闻", "防城港新闻", "钦州新闻", 
    "贵港新闻", "玉林新闻", "百色新闻", "贺州新闻", "河池新闻", "来宾新闻", "崇左新闻", "南宁公共",
    "柳州公共", "桂林公共", "梧州公共", "北海公共", "防城港公共", "钦州公共", "贵港公共", "玉林公共",
    "百色公共", "贺州公共", "河池公共", "来宾公共", "崇左公共", "南宁影视", "柳州影视", "桂林影视",
    "梧州影视", "北海影视", "防城港影视", "钦州影视", "贵港影视", "玉林影视", "百色影视", "贺州影视",
    "河池影视", "来宾影视"
]

# 贵州频道
gz_dictionary = [
    "贵州卫视", "贵州新闻", "贵州公共", "贵州影视", "贵州旅游", "贵州科教", "贵阳新闻", "贵阳生活", 
    "贵阳法制", "贵阳旅游", "贵阳都市", "遵义新闻", "六盘水新闻", "安顺新闻", "毕节新闻", "铜仁新闻", 
    "黔东南新闻", "黔南新闻", "黔西南新闻", "贵安新闻", "贵阳公共", "遵义公共", "六盘水公共", "安顺公共",
    "毕节公共", "铜仁公共", "黔东南公共", "黔南公共", "黔西南公共", "贵安公共", "贵阳影视", "遵义影视",
    "六盘水影视", "安顺影视", "毕节影视", "铜仁影视", "黔东南影视", "黔南影视", "黔西南影视", "贵安影视",
    "贵阳旅游", "遵义旅游", "六盘水旅游", "安顺旅游", "毕节旅游", "铜仁旅游", "黔东南旅游", "黔南旅游",
    "黔西南旅游", "贵安旅游"
]

# 河北频道
heb_dictionary = [
    "河北卫视", "河北经济", "河北影视", "河北都市", "河北公共", "河北少儿", "河北农民", "河北导视", 
    "石家庄新闻", "石家庄娱乐", "石家庄影视", "石家庄生活", "唐山新闻", "秦皇岛新闻", "邯郸新闻", 
    "邢台新闻", "保定新闻", "张家口新闻", "承德新闻", "沧州新闻", "廊坊新闻", "衡水新闻", "石家庄公共",
    "唐山公共", "秦皇岛公共", "邯郸公共", "邢台公共", "保定公共", "张家口公共", "承德公共", "沧州公共",
    "廊坊公共", "衡水公共", "石家庄影视", "唐山影视", "秦皇岛影视", "邯郸影视", "邢台影视", "保定影视",
    "张家口影视", "承德影视", "沧州影视", "廊坊影视", "衡水影视", "石家庄少儿", "唐山少儿", "秦皇岛少儿",
    "邯郸少儿", "邢台少儿"
]

# 河南频道
hen_dictionary = [
    "河南卫视", "河南新闻", "河南民生", "河南电视剧", "河南公共", "河南国际", "河南法制", "河南教育", 
    "郑州新闻", "郑州都市", "郑州影视", "郑州教育", "郑州文体", "洛阳新闻", "开封新闻", "安阳新闻", 
    "鹤壁新闻", "新乡新闻", "焦作新闻", "濮阳新闻", "许昌新闻", "漯河新闻", "三门峡新闻", "南阳新闻",
    "商丘新闻", "信阳新闻", "周口新闻", "驻马店新闻", "济源新闻", "郑州公共", "洛阳公共", "开封公共",
    "安阳公共", "鹤壁公共", "新乡公共", "焦作公共", "濮阳公共", "许昌公共", "漯河公共", "三门峡公共",
    "南阳公共", "商丘公共", "信阳公共", "周口公共", "驻马店公共", "济源公共", "郑州影视", "洛阳影视",
    "开封影视", "安阳影视"
]

# 黑龙江频道
hlj_dictionary = [
    "黑龙江卫视", "黑龙江新闻", "黑龙江都市", "黑龙江影视", "黑龙江公共", "黑龙江少儿", "黑龙江导视", 
    "哈尔滨新闻", "哈尔滨生活", "哈尔滨娱乐", "哈尔滨影视", "哈尔滨都市", "齐齐哈尔新闻", "牡丹江新闻", 
    "佳木斯新闻", "大庆新闻", "伊春新闻", "鸡西新闻", "鹤岗新闻", "双鸭山新闻", "七台河新闻", 
    "绥化新闻", "黑河新闻", "大兴安岭新闻", "哈尔滨公共", "齐齐哈尔公共", "牡丹江公共", "佳木斯公共",
    "大庆公共", "伊春公共", "鸡西公共", "鹤岗公共", "双鸭山公共", "七台河公共", "绥化公共", "黑河公共",
    "大兴安岭公共", "哈尔滨影视", "齐齐哈尔影视", "牡丹江影视", "佳木斯影视", "大庆影视", "伊春影视",
    "鸡西影视", "鹤岗影视", "双鸭山影视", "七台河影视", "绥化影视", "黑河影视"
]

# 吉林频道
jl_dictionary = [
    "吉林卫视", "吉林新闻", "吉林生活", "吉林影视", "吉林公共", "吉林乡村", "吉林教育", "吉林国际", 
    "长春新闻", "长春都市", "长春娱乐", "长春影视", "长春市民", "长春汽车", "吉林市新闻", "四平新闻", 
    "辽源新闻", "通化新闻", "白山新闻", "松原新闻", "白城新闻", "延边新闻", "长春公共", "吉林市公共",
    "四平公共", "辽源公共", "通化公共", "白山公共", "松原公共", "白城公共", "延边公共", "长春影视",
    "吉林市影视", "四平影视", "辽源影视", "通化影视", "白山影视", "松原影视", "白城影视", "延边影视",
    "长春少儿", "吉林市少儿", "四平少儿", "辽源少儿", "通化少儿", "白山少儿", "松原少儿", "白城少儿",
    "延边少儿", "长春教育"
]

# 江西频道
jx_dictionary = [
    "江西卫视", "江西新闻", "江西都市", "江西影视", "江西公共", "江西经济", "江西少儿", "江西教育", 
    "南昌新闻", "南昌都市", "南昌影视", "南昌生活", "景德镇新闻", "萍乡新闻", "九江新闻", "新余新闻", 
    "鹰潭新闻", "赣州新闻", "吉安新闻", "宜春新闻", "抚州新闻", "上饶新闻", "南昌公共", "景德镇公共",
    "萍乡公共", "九江公共", "新余公共", "鹰潭公共", "赣州公共", "吉安公共", "宜春公共", "抚州公共",
    "上饶公共", "南昌影视", "景德镇影视", "萍乡影视", "九江影视", "新余影视", "鹰潭影视", "赣州影视",
    "吉安影视", "宜春影视", "抚州影视", "上饶影视", "南昌少儿", "景德镇少儿", "萍乡少儿", "九江少儿",
    "新余少儿", "鹰潭少儿"
]

# 宁夏频道
nx_dictionary = [
    "宁夏卫视", "宁夏公共", "宁夏影视", "宁夏经济", "宁夏少儿", "银川新闻", "银川生活", "银川文体", 
    "石嘴山新闻", "吴忠新闻", "固原新闻", "中卫新闻", "灵武新闻", "青铜峡新闻", "永宁新闻", "贺兰新闻", 
    "平罗新闻", "盐池新闻", "同心新闻", "海原新闻", "银川公共", "石嘴山公共", "吴忠公共", "固原公共",
    "中卫公共", "灵武公共", "青铜峡公共", "永宁公共", "贺兰公共", "平罗公共", "盐池公共", "同心公共",
    "海原公共", "银川影视", "石嘴山影视", "吴忠影视", "固原影视", "中卫影视", "灵武影视", "青铜峡影视",
    "永宁影视", "贺兰影视", "平罗影视", "盐池影视", "同心影视", "海原影视", "银川少儿", "石嘴山少儿",
    "吴忠少儿", "固原少儿"
]

# 青海频道
qh_dictionary = [
    "青海卫视", "青海新闻", "青海经济", "青海影视", "青海生活", "青海少儿", "青海安多", "西宁新闻", 
    "西宁生活", "海东新闻", "海西新闻", "海南新闻", "海北新闻", "黄南新闻", "果洛新闻", "玉树新闻", 
    "格尔木新闻", "德令哈新闻", "大通新闻", "湟中新闻", "西宁公共", "海东公共", "海西公共", "海南公共",
    "海北公共", "黄南公共", "果洛公共", "玉树公共", "格尔木公共", "德令哈公共", "大通公共", "湟中公共",
    "西宁影视", "海东影视", "海西影视", "海南影视", "海北影视", "黄南影视", "果洛影视", "玉树影视",
    "格尔木影视", "德令哈影视", "大通影视", "湟中影视", "西宁少儿", "海东少儿", "海西少儿", "海南少儿",
    "海北少儿", "黄南少儿"
]

# 四川频道
sc_dictionary = [
    "四川卫视", "四川新闻", "四川经济", "四川影视", "四川公共", "四川科技", "四川国际", "四川妇女儿童", 
    "成都新闻", "成都经济", "成都影视", "成都公共", "成都少儿", "绵阳新闻", "自贡新闻", "攀枝花新闻", 
    "泸州新闻", "德阳新闻", "广元新闻", "遂宁新闻", "内江新闻", "乐山新闻", "南充新闻", "眉山新闻",
    "宜宾新闻", "广安新闻", "达州新闻", "雅安新闻", "巴中新闻", "资阳新闻", "阿坝新闻", "甘孜新闻",
    "凉山新闻", "成都公共", "绵阳公共", "自贡公共", "攀枝花公共", "泸州公共", "德阳公共", "广元公共",
    "遂宁公共", "内江公共", "乐山公共", "南充公共", "眉山公共", "宜宾公共", "广安公共", "达州公共",
    "雅安公共", "巴中公共"
]

# 天津频道
tj_dictionary = [
    "天津卫视", "天津新闻", "天津文艺", "天津影视", "天津都市", "天津体育", "天津科教", "天津公共", 
    "天津少儿", "天津国际", "滨海新闻", "滨海都市", "滨海影视", "滨海生活", "滨海少儿", "武清新闻", 
    "宝坻新闻", "宁河新闻", "静海新闻", "蓟州新闻", "天津公共新闻", "天津都市频道", "天津影视频道",
    "天津文艺频道", "天津体育频道", "天津科教频道", "天津少儿频道", "天津国际频道", "滨海公共", 
    "武清公共", "宝坻公共", "宁河公共", "静海公共", "蓟州公共", "滨海影视", "武清影视", "宝坻影视",
    "宁河影视", "静海影视", "蓟州影视", "滨海少儿", "武清少儿", "宝坻少儿", "宁河少儿", "静海少儿",
    "蓟州少儿", "滨海生活", "武清生活", "宝坻生活", "宁河生活", "静海生活"
]

# 新疆频道
xj_dictionary = [
    "新疆卫视", "新疆汉语", "新疆维语", "新疆哈语", "新疆少儿", "新疆经济", "新疆影视", "新疆体育", 
    "乌鲁木齐新闻", "乌鲁木齐维语", "乌鲁木齐哈语", "克拉玛依新闻", "吐鲁番新闻", "哈密新闻", 
    "昌吉新闻", "博尔塔拉新闻", "巴音郭楞新闻", "阿克苏新闻", "克孜勒苏新闻", "喀什新闻", "和田新闻",
    "伊犁新闻", "塔城新闻", "阿勒泰新闻", "乌鲁木齐公共", "克拉玛依公共", "吐鲁番公共", "哈密公共",
    "昌吉公共", "博尔塔拉公共", "巴音郭楞公共", "阿克苏公共", "克孜勒苏公共", "喀什公共", "和田公共",
    "伊犁公共", "塔城公共", "阿勒泰公共", "乌鲁木齐影视", "克拉玛依影视", "吐鲁番影视", "哈密影视",
    "昌吉影视", "博尔塔拉影视", "巴音郭楞影视", "阿克苏影视", "克孜勒苏影视", "喀什影视", "和田影视"
]

# ========== 新增娱乐类型频道字典 ==========
# 娱乐综合频道
yl_dictionary = [
    "湖南娱乐", "东方娱乐", "江苏综艺", "浙江娱乐", "北京文艺", "安徽综艺", "山东综艺", "天津文艺",
    "江西娱乐", "深圳娱乐", "广西综艺", "四川文艺", "重庆时尚", "东南娱乐", "贵州影视", "云南娱乐",
    "河北影视", "湖北综合", "辽宁文艺", "陕西生活", "快乐购", "风尚购物", "好享购物", "家家购物",
    "时尚剧场", "情感剧场", "都市剧场", "欢笑剧场", "魅力音乐", "劲爆体育", "游戏风云", "动漫秀场",
    "娱乐现场", "明星大侦探", "欢乐喜剧人", "奔跑吧", "极限挑战", "王牌对王牌", "向往的生活", "快乐大本营",
    "天天向上", "非诚勿扰", "中国好声音", "歌手", "蒙面唱将", "声临其境", "吐槽大会", "脱口秀大会",
    "奇葩说", "乐队的夏天", "创造营", "青春有你", "偶像练习生", "明日之子", "乘风破浪的姐姐", "披荆斩棘的哥哥",
    "追光吧", "舞蹈风暴", "这！就是街舞", "中国新说唱", "中国有嘻哈", "国风美少年", "声入人心", "天籁之战"
]

# 小品频道
xp_dictionary = [
    "央视小品", "欢乐小品", "喜剧小品", "经典小品", "小品精选", "赵本山小品", "宋小宝小品", "沈腾小品",
    "贾玲小品", "岳云鹏小品", "陈佩斯小品", "朱时茂小品", "潘长江小品", "蔡明小品", "冯巩小品", "黄宏小品",
    "郭冬临小品", "大兵小品", "巩汉林小品", "范伟小品", "东北小品", "天津小品", "北京小品", "海派小品",
    "粤语小品", "相声小品", "晚会小品", "情景喜剧", "搞笑短剧", "幽默集锦", "开心麻花", "本山传媒",
    "德云社小品", "欢乐喜剧人小品", "笑傲江湖小品", "我为喜剧狂", "喜剧总动员", "跨界喜剧王", "笑声传奇",
    "笑星闯地球", "欢乐集结号", "欢乐送", "笑礼相迎", "笑傲帮", "笑星大联盟", "欢乐星期二", "欢乐星期三",
    "欢乐星期四", "欢乐星期五", "欢乐星期六", "欢乐星期天"
]

# 相声频道
xs_dictionary = [
    "央视相声", "德云社", "相声大会", "经典相声", "相声精选", "郭德纲相声", "于谦相声", "岳云鹏相声",
    "孙越相声", "郭麒麟相声", "孟鹤堂相声", "周九良相声", "张云雷相声", "杨九郎相声", "烧饼相声", "曹鹤阳相声",
    "张鹤伦相声", "郎鹤炎相声", "高峰相声", "栾云平相声", "谢金相声", "李鹤东相声", "单口相声", "对口相声",
    "群口相声", "天津相声", "北京相声", "东北相声", "海派相声", "相声新势力", "嘻哈包袱铺", "青曲社",
    "相声有新人", "笑礼相迎", "相声小品大赛", "相声专场", "相声茶馆", "相声TV", "相声广播", "相声FM",
    "相声在线", "相声大全", "相声经典", "相声新作", "相声精选", "相声合集", "相声精选", "相声排行榜",
    "相声排行榜", "相声热榜", "相声热搜", "相声推荐"
]

# AKtv频道
ak_dictionary = [
    "AKtv综合", "AKtv电影", "AKtv电视剧", "AKtv综艺", "AKtv动漫", "AKtv音乐", "AKtv体育", "AKtv新闻",
    "AKtv财经", "AKtv纪录片", "AKtv娱乐", "AKtv少儿", "AKtv生活", "AKtv时尚", "AKtv旅游", "AKtv美食",
    "AKtv健康", "AKtv教育", "AKtv科技", "AKtv汽车", "AKtv房产", "AKtv游戏", "AKtv文化", "AKtv戏曲",
    "AKtv军事", "AKtv农业", "AKtv国际", "AKtv4K", "AKtv8K", "AKtvVR", "AKtv直播", "AKtv点播",
    "AKtv回看", "AKtv互动", "AKtv高清", "AKtv超清", "AKtv蓝光", "AKtv杜比", "AKtvHDR", "AKtv3D",
    "AKtv全景声", "AKtv多屏", "AKtv手机", "AKtv平板", "AKtv电视", "AKtv投影", "AKtvVR眼镜", "AKtv智能",
    "AKtv云", "AKtv会员", "AKtvVIP", "AKtv白金", "AKtv钻石", "AKtv黄金", "AKtv铂金", "AKtv至尊"
]

# 新加坡式英语频道
sg_english_dictionary = [
    "新加坡英语", "Singlish频道", "新加坡娱乐", "新加坡新闻", "新加坡电影", "新加坡电视剧", "新加坡综艺",
    "新加坡音乐", "新加坡文化", "狮城频道", "新传媒", "Channel 5", "Channel 8", "Channel U", "CNA",
    "Okto", "Suria", "Vasantham", "亚洲新闻台", "新加坡体育", "新加坡财经", "新加坡旅游", "新加坡美食",
    "新加坡教育", "新加坡科技", "新加坡时尚", "新加坡健康", "新加坡生活", "新加坡戏剧", "新加坡卡通",
    "新加坡脱口秀", "新加坡真人秀", "新加坡选秀", "新加坡访谈", "新加坡纪录片", "新加坡儿童", "新加坡动画",
    "新加坡游戏", "新加坡音乐现场", "新加坡演唱会", "新加坡音乐节", "新加坡电影节", "新加坡电视剧场",
    "新加坡综艺秀", "新加坡新闻直播", "新加坡财经直播", "新加坡体育直播", "新加坡娱乐直播", "新加坡生活直播",
    "新加坡美食直播", "新加坡旅游直播", "新加坡教育直播", "新加坡科技直播", "新加坡时尚直播", "新加坡健康直播"
]

# 自定义源
urls = read_txt_to_array('assets/urls.txt')

# 从网络获取额外源
def fetch_online_sources():
    """从网络获取额外的直播源"""
    online_sources = []
    try:
        # GitHub上的公开直播源
        github_urls = [
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/cn.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/hk.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/tw.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/jp.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/kr.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/us.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/fr.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/de.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/uk.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/ru.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/ca.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/au.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/in.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/ph.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/sg.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/my.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/th.m3u",
            "https://raw.githubusercontent.com/iptv-org/iptv/master/streams/vn.m3u"
        ]
        
        # 中文直播源网站
        cn_sources = [
            "http://www.电视直播源.com/sources.txt",
            "http://www.直播源大全.net/list.txt",
            "http://www.iptvshare.com/sources.m3u",
            "http://www.freeiptv.cn/list.txt",
            "http://www.liveiptv.pro/sources.m3u"
        ]
        
        # 添加到在线源列表
        online_sources.extend(github_urls)
        online_sources.extend(cn_sources)
        
        print(f"从网络获取了 {len(online_sources)} 个额外源")
    except Exception as e:
        print(f"获取在线源出错: {e}")
    
    return online_sources

# 添加网络源到自定义源
online_sources = fetch_online_sources()
urls.extend(online_sources)

# 简繁转换
def traditional_to_simplified(text: str) -> str:
    """繁体转简体"""
    converter = opencc.OpenCC('t2s')
    return converter.convert(text)

# M3U格式判断
def is_m3u_content(text):
    """判断内容是否为M3U格式"""
    lines = text.splitlines()
    return lines[0].strip().startswith("#EXTM3U") if lines else False

def convert_m3u_to_txt(m3u_content):
    """将M3U内容转换为TXT格式"""
    lines = m3u_content.split('\n')
    txt_lines = []
    channel_name = ""
    
    for line in lines:
        if line.startswith("#EXTM3U"):
            continue
        if line.startswith("#EXTINF"):
            # 提取频道名称
            parts = line.split(',', 1)
            if len(parts) > 1:
                channel_name = parts[1].strip()
        elif line.startswith("http") or line.startswith("rtmp") or line.startswith("p3p"):
            txt_lines.append(f"{channel_name},{line.strip()}")
            channel_name = ""
        
        # 处理后缀名为m3u，但是内容为txt的文件
        if "#genre#" not in line and "," in line and "://" in line:
            pattern = r'^[^,]+,[^\s]+://[^\s]+$'
            if re.match(pattern, line):
                txt_lines.append(line)
    
    return '\n'.join(txt_lines)

# URL测速函数（严格测速）
def check_speed(url, timeout=2):
    """检查URL响应速度，返回响应时间(毫秒)或-1（超时）"""
    # 跳过本地地址
    if "127.0.0.1" in url or "localhost" in url:
        return 0
    
    # 解析URL获取主机和端口
    parsed = urlparse(url)
    host = parsed.hostname
    port = parsed.port or (443 if parsed.scheme == 'https' else 80)
    
    try:
        # 创建socket连接
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        
        start_time = time.time()
        sock.connect((host, port))
        
        # 如果是HTTP/HTTPS，发送HEAD请求
        if parsed.scheme in ['http', 'https']:
            request = f"HEAD {parsed.path or '/'} HTTP/1.1\r\nHost: {host}\r\nConnection: close\r\n\r\n"
            sock.send(request.encode())
            # 读取部分响应以确保连接正常
            response = sock.recv(1024)
            if not response:
                return -1
        
        end_time = time.time()
        sock.close()
        
        return int((end_time - start_time) * 1000)  # 返回毫秒
    except Exception as e:
        return -1  # 超时或连接失败

# 处理带$的URL
def clean_url(url):
    """清理URL中的多余参数"""
    last_dollar_index = url.rfind('$')
    return url[:last_dollar_index] if last_dollar_index != -1 else url

# 清理频道名称
removal_list = ["「IPV4」", "「IPV6」", "[ipv6]", "[ipv4]", "_电信", "电信", "（HD）", "[超清]", "高清", "超清", 
                "-HD", "(HK)", "AKtv", "@", "IPV6", "🎞️", "🎦", " ", "[BD]", "[VGA]", "[HD]", "[SD]", 
                "(1080p)", "(720p)", "(480p)", "【高清】", "【超清】", "【蓝光】", "【4K】", "【8K】"]

def clean_channel_name(channel_name, removal_list):
    """清理频道名称中的特殊字符"""
    for item in removal_list:
        channel_name = channel_name.replace(item, "")
    replacements = {
        "CCTV-": "CCTV",
        "CCTV0": "CCTV",
        "PLUS": "+",
        "NewTV-": "NewTV",
        "iHOT-": "iHOT",
        "NEW": "New",
        "New_": "New",
        "ＣＣＴＶ": "CCTV",  # 全角字符转换
        "中央台": "CCTV",
        "央视": "CCTV"
    }
    for old, new in replacements.items():
        channel_name = channel_name.replace(old, new)
    return channel_name.strip()

# 加载频道名称纠错
def load_corrections_name(filename):
    """加载频道名称纠错规则"""
    corrections = {}
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                parts = line.split(',')
                if len(parts) > 1:
                    correct_name = parts[0]
                    for name in parts[1:]:
                        corrections[name] = correct_name
    except Exception as e:
        print(f"加载纠错文件出错: {e}")
    return corrections

# 应用频道名称纠错
corrections_name = load_corrections_name('assets/corrections_name.txt')
def correct_name_data(name):
    """纠正频道名称"""
    return corrections_name.get(name, name)

# 频道处理函数
def process_channel_line(line):
    """处理单行频道数据"""
    if "#genre#" not in line and "#EXTINF:" not in line and "," in line and "://" in line:
        parts = line.split(',', 1)
        if len(parts) < 2:
            return
        
        channel_name = parts[0]
        channel_address = clean_url(parts[1].strip())
        
        # 跳过空地址
        if not channel_address:
            return
        
        # 频道名称处理
        channel_name = traditional_to_simplified(channel_name)  # 繁转简
        channel_name = clean_channel_name(channel_name, removal_list)  # 清理特殊字符
        channel_name = correct_name_data(channel_name).strip()  # 应用纠错
        
        # 检查是否已处理过该频道
        if channel_name in global_channel_records:
            # print(f"频道已存在，跳过: {channel_name}")
            return
        
        # 测速检查（严格模式）
        response_time = check_speed(channel_address)
        if response_time == -1 or response_time > 2000:  # 超过2秒视为无效
            print(f"源测速失败或超时: {channel_name} ({response_time}ms)")
            return
        
        # 记录已处理的频道
        global_channel_records[channel_name] = True
        
        # 重新构建行
        line = f"{channel_name},{channel_address}"
        
        # 根据频道名称分发到不同分类
        matched = False
        
        # 主频道分类
        for category, dictionary, lines in [
            ("央视频道", ys_dictionary, ys_lines),
            ("卫视频道", ws_dictionary, ws_lines),
            ("港澳台", gat_dictionary, gat_lines),
            ("电影频道", dy_dictionary, dy_lines),
            ("电视剧频道", dsj_dictionary, dsj_lines),
            ("综艺频道", zy_dictionary, zy_lines),
            ("NewTV", newtv_dictionary, newtv_lines),
            ("iHOT", ihot_dictionary, ihot_lines),
            ("体育频道", ty_dictionary, ty_lines),
            ("咪咕直播", migu_dictionary, migu_lines),
            ("埋堆堆", mdd_dictionary, mdd_lines),
            ("音乐频道", yy_dictionary, yy_lines),
            ("游戏频道", game_dictionary, game_lines),
            ("解说频道", js_dictionary, js_lines),
            ("儿童", et_dictionary, et_lines),
            ("国际台", gj_dictionary, gj_lines),
            ("纪录片", jlp_dictionary, jlp_lines),
            ("戏曲频道", xq_dictionary, xq_lines),
            ("春晚", cw_dictionary, cw_lines),
            ("直播中国", zb_dictionary, zb_lines),
            ("MTV", mtv_dictionary, mtv_lines),
            ("收音机频道", radio_dictionary, radio_lines)
        ]:
            if channel_name in dictionary:
                lines.append(line)
                matched = True
                break
        
        if matched:
            return
        
        # 国际频道分类
        for category, dictionary, lines in [
            ("日本频道", jp_dictionary, jp_lines),
            ("韩国频道", kr_dictionary, kr_lines),
            ("美国频道", us_dictionary, us_lines),
            ("法国频道", fr_dictionary, fr_lines),
            ("英国频道", uk_dictionary, uk_lines),
            ("德国频道", de_dictionary, de_lines),
            ("俄罗斯频道", ru_dictionary, ru_lines),
            ("加拿大频道", ca_dictionary, ca_lines),
            ("澳大利亚频道", au_dictionary, au_lines),
            ("印度频道", in_dictionary, in_lines),
            ("菲律宾频道", ph_dictionary, ph_lines),
            ("新加坡频道", sg_dictionary, sg_lines),
            ("马来西亚频道", my_dictionary, my_lines),
            ("泰国频道", th_dictionary, th_lines),
            ("越南频道", vn_dictionary, vn_lines)
        ]:
            if channel_name in dictionary:
                lines.append(line)
                matched = True
                break
        
        if matched:
            return
        
        # 地方台分类
        for category, dictionary, lines in [
            ("上海频道", sh_dictionary, sh_lines),
            ("浙江频道", zj_dictionary, zj_lines),
            ("江苏频道", jsu_dictionary, jsu_lines),
            ("广东频道", gd_dictionary, gd_lines),
            ("湖南频道", hn_dictionary, hn_lines),
            ("安徽频道", ah_dictionary, ah_lines),
            ("海南频道", hain_dictionary, hain_lines),
            ("内蒙频道", nm_dictionary, nm_lines),
            ("湖北频道", hb_dictionary, hb_lines),
            ("辽宁频道", ln_dictionary, ln_lines),
            ("陕西频道", sx_dictionary, sx_lines),
            ("山西频道", shanxi_dictionary, shanxi_lines),
            ("山东频道", shandong_dictionary, shandong_lines),
            ("云南频道", yunnan_dictionary, yunnan_lines),
            ("北京频道", bj_dictionary, bj_lines),
            ("重庆频道", cq_dictionary, cq_lines),
            ("福建频道", fj_dictionary, fj_lines),
            ("甘肃频道", gs_dictionary, gs_lines),
            ("广西频道", gx_dictionary, gx_lines),
            ("贵州频道", gz_dictionary, gz_lines),
            ("河北频道", heb_dictionary, heb_lines),
            ("河南频道", hen_dictionary, hen_lines),
            ("黑龙江频道", hlj_dictionary, hlj_lines),
            ("吉林频道", jl_dictionary, jl_lines),
            ("江西频道", jx_dictionary, jx_lines),
            ("宁夏频道", nx_dictionary, nx_lines),
            ("青海频道", qh_dictionary, qh_lines),
            ("四川频道", sc_dictionary, sc_lines),
            ("天津频道", tj_dictionary, tj_lines),
            ("新疆频道", xj_dictionary, xj_lines)
        ]:
            if channel_name in dictionary:
                lines.append(line)
                matched = True
                break
        
        if matched:
            return
        
        # 娱乐类型分类
        for category, dictionary, lines in [
            ("娱乐综合", yl_dictionary, yl_lines),
            ("小品天地", xp_dictionary, xp_lines),
            ("相声精选", xs_dictionary, xs_lines),
            ("AKtv频道", ak_dictionary, ak_lines),
            ("新加坡英语", sg_english_dictionary, sg_english_lines)
        ]:
            if channel_name in dictionary:
                lines.append(line)
                matched = True
                break
        
        # 如果以上都不匹配，添加到其他频道
        if not matched:
            other_lines.append(line)

# 处理URL源
def process_url(url):
    """处理单个URL源"""
    print(f"处理URL源: {url}")
    try:
        # 创建请求头
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
        }
        req = urllib.request.Request(url, headers=headers)
        
        # 打开URL并读取内容
        with urllib.request.urlopen(req, timeout=10) as response:
            data = response.read()
            
            # 尝试不同编码
            try:
                text = data.decode('utf-8')
            except UnicodeDecodeError:
                try:
                    text = data.decode('gbk')
                except UnicodeDecodeError:
                    try:
                        text = data.decode('iso-8859-1')
                    except:
                        print("无法解码内容")
                        return
            
            # 处理M3U格式
            if is_m3u_content(text):
                text = convert_m3u_to_txt(text)
            
            # 处理每行数据
            lines = text.split('\n')
            print(f"发现 {len(lines)} 行数据")
            for line in lines:
                if "#genre#" not in line and "," in line and "://" in line:
                    parts = line.split(',', 1)
                    if len(parts) < 2:
                        continue
                    
                    channel_name, channel_address = parts
                    # 处理多个URL分隔符
                    if '#' in channel_address:
                        url_list = channel_address.split('#')
                        for url_part in url_list:
                            if url_part.strip():
                                new_line = f"{channel_name},{url_part.strip()}"
                                process_channel_line(new_line)
                    else:
                        process_channel_line(line)
    
    except Exception as e:
        print(f"处理URL出错: {e}")

# 数据排序
def sort_data(order, data):
    """按指定顺序排序数据"""
    order_dict = {name: i for i, name in enumerate(order)}
    
    def sort_key(line):
        name = line.split(',')[0]
        return order_dict.get(name, len(order))
    
    return sorted(data, key=sort_key)

# 使用线程池处理URL源
def process_urls_with_threads(urls, max_workers=10):
    """使用线程池处理URL源"""
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(process_url, url) for url in urls]
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"处理URL时出错: {e}")

# 处理所有URL源
process_urls_with_threads(urls)

# 生成时间戳
utc_time = datetime.now(timezone.utc)
beijing_time = utc_time + timedelta(hours=8)
formatted_time = beijing_time.strftime("%Y%m%d %H:%M")
version = f"{formatted_time},https://gcalic.v.myalicdn.com/gc/wgw05_1/index.m3u8?contentid=2820180516001"

# 构建完整频道列表（只包含有频道的分类）
all_lines = [
    "更新时间,#genre#", version, ''
]

# 按分类添加频道（只添加有频道的分类）
def add_category(category_name, lines_list, dictionary=None):
    """添加分类到最终列表（如果分类中有频道）"""
    if lines_list:
        all_lines.append(f"{category_name},#genre#")
        if dictionary:
            # 去重处理
            unique_lines = list(set(lines_list))
            all_lines.extend(sort_data(dictionary, unique_lines))
        else:
            unique_lines = list(set(lines_list))
            all_lines.extend(sorted(unique_lines))
        all_lines.append('')

# 添加主频道分类
add_category("央视频道", ys_lines, ys_dictionary)
add_category("卫视频道", ws_lines, ws_dictionary)
add_category("港澳台", gat_lines, gat_dictionary)
add_category("电影频道", dy_lines, dy_dictionary)
add_category("电视剧频道", dsj_lines, dsj_dictionary)
add_category("综艺频道", zy_lines, zy_dictionary)
add_category("NewTV", newtv_lines, newtv_dictionary)
add_category("iHOT", ihot_lines, ihot_dictionary)
add_category("体育频道", ty_lines, ty_dictionary)
add_category("咪咕直播", migu_lines, migu_dictionary)
add_category("埋堆堆", mdd_lines, mdd_dictionary)
add_category("音乐频道", yy_lines, yy_dictionary)
add_category("游戏频道", game_lines, game_dictionary)
add_category("解说频道", js_lines, js_dictionary)
add_category("儿童", et_lines, et_dictionary)
add_category("国际台", gj_lines, gj_dictionary)
add_category("纪录片", jlp_lines, jlp_dictionary)
add_category("戏曲频道", xq_lines, xq_dictionary)
add_category("春晚", cw_lines, cw_dictionary)
add_category("直播中国", zb_lines, zb_dictionary)
add_category("MTV", mtv_lines, mtv_dictionary)
add_category("收音机频道", radio_lines, radio_dictionary)

# 添加国际频道分类
add_category("日本频道", jp_lines, jp_dictionary)
add_category("韩国频道", kr_lines, kr_dictionary)
add_category("美国频道", us_lines, us_dictionary)
add_category("法国频道", fr_lines, fr_dictionary)
add_category("英国频道", uk_lines, uk_dictionary)
add_category("德国频道", de_lines, de_dictionary)
add_category("俄罗斯频道", ru_lines, ru_dictionary)
add_category("加拿大频道", ca_lines, ca_dictionary)
add_category("澳大利亚频道", au_lines, au_dictionary)
add_category("印度频道", in_lines, in_dictionary)
add_category("菲律宾频道", ph_lines, ph_dictionary)
add_category("新加坡频道", sg_lines, sg_dictionary)
add_category("马来西亚频道", my_lines, my_dictionary)
add_category("泰国频道", th_lines, th_dictionary)
add_category("越南频道", vn_lines, vn_dictionary)

# 添加地方台分类
add_category("上海频道", sh_lines, sh_dictionary)
add_category("浙江频道", zj_lines, zj_dictionary)
add_category("江苏频道", jsu_lines, jsu_dictionary)
add_category("广东频道", gd_lines, gd_dictionary)
add_category("湖南频道", hn_lines, hn_dictionary)
add_category("安徽频道", ah_lines, ah_dictionary)
add_category("海南频道", hain_lines, hain_dictionary)
add_category("内蒙频道", nm_lines, nm_dictionary)
add_category("湖北频道", hb_lines, hb_dictionary)
add_category("辽宁频道", ln_lines, ln_dictionary)
add_category("陕西频道", sx_lines, sx_dictionary)
add_category("山西频道", shanxi_lines, shanxi_dictionary)
add_category("山东频道", shandong_lines, shandong_dictionary)
add_category("云南频道", yunnan_lines, yunnan_dictionary)
add_category("北京频道", bj_lines, bj_dictionary)
add_category("重庆频道", cq_lines, cq_dictionary)
add_category("福建频道", fj_lines, fj_dictionary)
add_category("甘肃频道", gs_lines, gs_dictionary)
add_category("广西频道", gx_lines, gx_dictionary)
add_category("贵州频道", gz_lines, gz_dictionary)
add_category("河北频道", heb_lines, heb_dictionary)
add_category("河南频道", hen_lines, hen_dictionary)
add_category("黑龙江频道", hlj_lines, hlj_dictionary)
add_category("吉林频道", jl_lines, jl_dictionary)
add_category("江西频道", jx_lines, jx_dictionary)
add_category("宁夏频道", nx_lines, nx_dictionary)
add_category("青海频道", qh_lines, qh_dictionary)
add_category("四川频道", sc_lines, sc_dictionary)
add_category("天津频道", tj_lines, tj_dictionary)
add_category("新疆频道", xj_lines, xj_dictionary)

# ========== 添加新增娱乐类型分类 ==========
add_category("娱乐综合", yl_lines, yl_dictionary)
add_category("小品天地", xp_lines, xp_dictionary)
add_category("相声精选", xs_lines, xs_dictionary)
add_category("AKtv频道", ak_lines, ak_dictionary)
add_category("新加坡英语", sg_english_lines, sg_english_dictionary)

# 添加其他频道分类（如果有内容）
if other_lines:
    other_lines.append("其他,#genre#")
    add_category("其他", other_lines)

# 生成M3U文件
def make_m3u(txt_content, m3u_file):
    """从文本内容生成M3U文件"""
    try:
        output_text = '#EXTM3U x-tvg-url="https://epg.112114.xyz/pp.xml.gz"\n'
        lines = txt_content.strip().split("\n")
        
        group_name = ""
        for line in lines:
            parts = line.split(",")
            if len(parts) == 2 and "#genre#" in line:
                group_name = parts[0]
            elif len(parts) == 2:
                channel_name = parts[0]
                channel_url = parts[1]
                logo_url = f"https://epg.112114.xyz/logo/{channel_name}.png"
                
                output_text += f'#EXTINF:-1 tvg-name="{channel_name}" tvg-logo="{logo_url}" group-title="{group_name}",{channel_name}\n'
                output_text += f"{channel_url}\n"
        
        with open(m3u_file, "w", encoding='utf-8') as file:
            file.write(output_text)
        print(f"M3U文件 '{m3u_file}' 生成成功")
    except Exception as e:
        print(f"生成M3U文件出错: {e}")

# 保存文件
try:
    # 生成TXT文件
    with open("live.txt", "w", encoding='utf-8') as f:
        f.write("\n".join(all_lines))
    print("频道文件已保存: live.txt")
    
    # 生成M3U文件
    make_m3u("\n".join(all_lines), "live.m3u")
    
    # 生成JSON文件（可选）
    json_data = {
        "last_updated": formatted_time,
        "channels": []
    }
    
    group_name = ""
    for line in all_lines:
        if "#genre#" in line:
            group_name = line.split(",")[0]
        elif "," in line and "://" in line:
            parts = line.split(",", 1)
            if len(parts) == 2:
                channel_name, channel_url = parts
                json_data["channels"].append({
                    "name": channel_name,
                    "url": channel_url,
                    "group": group_name
                })
    
    with open("live.json", "w", encoding='utf-8') as f:
        json.dump(json_data, f, ensure_ascii=False, indent=2)
    print("JSON文件已保存: live.json")
    
except Exception as e:
    print(f"保存文件出错: {e}")

# 计算执行时间
timeend = datetime.now()
elapsed_time = timeend - timestart
total_seconds = elapsed_time.total_seconds()
minutes = int(total_seconds // 60)
seconds = int(total_seconds % 60)

# 统计信息
print(f"执行时间: {minutes}分{seconds}秒")
print(f"央视频道: {len(ys_lines)}")
print(f"卫视频道: {len(ws_lines)}")
print(f"港澳台频道: {len(gat_lines)}")
print(f"国际频道: {len(jp_lines)+len(kr_lines)+len(us_lines)+len(fr_lines)+len(uk_lines)}")
print(f"地方频道: {len(sh_lines)+len(zj_lines)+len(gd_lines)}")
print(f"娱乐频道: {len(yl_lines)+len(xp_lines)+len(xs_lines)+len(ak_lines)}")
print(f"其他频道: {len(other_lines)}")
print(f"总频道数: {len(all_lines)}")
